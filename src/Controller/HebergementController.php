<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Hebergement;
use App\Repository\HebergementRepository;
use App\Form\HebergementType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Knp\Component\Pager\PaginatorInterface;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;

class HebergementController extends AbstractController
{
    /**
     * @Route("/hebergement", name="app_hebergement")
    
     */
    public function index(): Response
    {
        return $this->render('hebergement/index.html.twig', [
            'controller_name' => 'HebergementController',
        ]);
    }
     /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
      /**
  * @Route("/newHebergement", name="newHebergement")
    
   
  */

  public function newHebergement(Request $request )
  {   $hebergement= new Hebergement();
    $form =$this->createForm (HebergementType::class, $hebergement);
    $form -> add ('Ajouter', SubmitType::Class);
    $form ->handleRequest($request);
    if ($form->isSubmitted() && $form->isValid()){
        $file = $form->get('image')->getData();

          $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

          // moves the file to the directory where brochures are stored
          $file->move(
              $this->getParameter('brochures_directory'),
              $fileName
          );

          $hebergement->setImage($fileName);
        $hebergement= $form->getData();
        $em= $this->getDoctrine()->getManager();
        $em->persist ($hebergement);
        $em->flush();
        $this->get('session')->getFlashBag()->add('notice','Ajout Avec SuccÃ©s');
        return $this->redirectToRoute('newHebergement');
    }
    return $this->render('hebergement/index.html.twig', [
        'form' => $form -> createView (),
    ]);
  }
 
      /**
     * @Route("/AfficheHebergementFront", name="AfficheHebergementFront")
     */
    public function AfficheHebergementFront(){
        $repository=$this->getDoctrine()->getRepository(Hebergement::class); 
        $hebergement=$repository->findAll();
        return $this->render('hebergement/AfficheFront.html.twig', 
        ['aa'=>$hebergement]); 
     }
            /**
         * @Route ("/deleteHebergement/{id}",name="deleteHebergement")
         */
        public function deleteHebergement($id)
        {
            $em=$this->getDoctrine()->getManager();
            $hebergement= $em ->getRepository (Hebergement::class)->find ($id);
            $em->remove($hebergement);
            $em->flush();
           
             return $this->redirectToRoute('AfficheHebergement') ;
        }
      /**
     * @Route("/updateHebergement/{id}", name="updateHebergement")
     */
    public function updateHebergement(Request $request, $id)
    {
        $em= $this->getDoctrine()->getManager();
        $hebergement= $em ->getRepository (Hebergement::class)->find ($id);
        $form =$this->createForm (HebergementType::class, $hebergement);
        $form -> add ('Update/Modifier', SubmitType::Class);
        $form ->handleRequest($request);
        if ($form->isSubmitted()){
            $file = $form->get('image')->getData();
  
              $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
  
              // moves the file to the directory where brochures are stored
              $file->move(
                  $this->getParameter('brochures_directory'),
                  $fileName
              );
  
              $hebergement->setImage($fileName);
            $hebergement= $form->getData();
            $em= $this->getDoctrine()->getManager();
            $em->persist ($hebergement);
            $em->flush();
            return $this->redirectToRoute('AfficheHebergement');
        }
        return $this->render('hebergement/Modifier.html.twig', [
            'form_title'=> "modifier un Event",
            'form' => $form -> createView (),
        ]);
    }
 
     /**
     * @Route("/AfficheHebergement", name="AfficheHebergement")
     */
    public function AfficheHebergement(Request $request, PaginatorInterface $paginator): Response{
        $repository=$this->getDoctrine()->getRepository(Hebergement::class); 
        $allhebergement=$repository->findAll();
       

    // Paginate the results of the query
    $hebergement = $paginator->paginate(
    // Doctrine Query, not results
        $allhebergement,
        // Define the page parameter
        $request->query->getInt('page', 1),
        // Items per page
        1
    );
        return $this->render('hebergement/Affiche.html.twig', 
        ['aa'=>$hebergement]); 
     }
    

}
